name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: nightly
            experimental: true
    continue-on-error: ${{ matrix.experimental || false }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy --lib -- -D clippy::correctness -D clippy::suspicious -A clippy::pedantic -A clippy::nursery -A clippy::style -A clippy::complexity -A clippy::perf -A clippy::approx-constant
      if: matrix.rust == 'stable'
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run unit tests (embedded in modules)
      run: cargo test --lib --verbose
    
    - name: Run doctests
      run: cargo test --doc --verbose

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  build:
    name: Build for Release
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release
      run: cargo build --release --verbose
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jing-binary
        path: target/release/jing*
        retention-days: 30

  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build
      run: cargo build --release
    
    - name: Test example files
      run: |
        # Test each .jing example file if they exist
        if ls examples/*.jing 1> /dev/null 2>&1; then
          for file in examples/*.jing; do
            echo "Testing $file"
            ./target/release/jing "$file" || echo "Warning: $file failed to execute"
          done
        else
          echo "No example files found"
        fi

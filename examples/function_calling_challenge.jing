// Demonstrating the Function Calling Challenge

print("=== Function Calling Challenge Demo ===");

// This function is defined in VM memory
fn my_handler(request) {
    print("✅ my_handler called with: " + request);
    return http_response(200, "text/plain", "Response from my_handler!");
}

print("Function defined in VM environment: ✅");

// Register the function name as a string
let server = start_http_server(8087);
let reg = http_register_handler(server, "GET", "/demo", "my_handler");
print("Function name registered: " + reg);

print("\n=== The Problem ===");
print("1. Function 'my_handler' exists in THIS VM environment");
print("2. HTTP server stores function NAME as string: 'my_handler'"); 
print("3. HTTP server runs in DIFFERENT threads");
print("4. When request arrives, HTTP thread has:");
print("   ✅ Function name: 'my_handler'");
print("   ❌ No access to the actual function");
print("   ❌ No way to call it");

print("\n=== What Happens Now ===");
print("Visit http://127.0.0.1:8087/demo and you'll see:");
print("'Custom handler registered for GET /demo (handler calling not yet implemented)'");
print("");
print("The my_handler() function above will NEVER be called.");

print("\n=== What We Need ===");
print("A bridge between HTTP threads and VM functions:");
print("HTTP Request → Function Name Lookup → VM Function Call → HTTP Response");

// Clean up
let stop = stop_http_server(server);
print("\nServer stopped: " + stop);

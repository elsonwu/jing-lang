// Basic HTTP Server Example
// This example demonstrates how to create a simple HTTP server in Jing

// Start an HTTP server on port 8080
let server_result = start_http_server(8080);
print("Server Status: " + server_result);

// List all running servers
let servers = list_http_servers();
print("Running Servers:");
print(servers);

// Create some HTTP responses (for demonstration)
let json_response = http_response(200, "application/json", "{\"message\": \"Hello, World!\", \"status\": \"ok\"}");
print("JSON Response Example:");
print(json_response);

let html_response = http_response(200, "text/html", "<html><body><h1>Hello from Jing!</h1></body></html>");
print("HTML Response Example:");
print(html_response);

let error_response = http_response(404, "text/plain", "Page not found");
print("Error Response Example:");
print(error_response);

// The server will run in the background and handle requests:
// - GET / : Welcome page with available endpoints
// - GET /status : JSON status information
// - POST /echo : Echo back the request body as JSON

print("HTTP Server is running on http://127.0.0.1:8080");
print("Try these endpoints:");
print("  - GET http://127.0.0.1:8080/");
print("  - GET http://127.0.0.1:8080/status");
print("  - POST http://127.0.0.1:8080/echo (with any body content)");

// Note: In a real application, you might want to:
// 1. Handle server responses based on request paths
// 2. Parse JSON request bodies
// 3. Implement custom routing logic
// 4. Add error handling and logging

// Stop the server when done (uncomment to stop)
// let stop_result = stop_http_server(8080);
// print("Stop Status: " + stop_result);

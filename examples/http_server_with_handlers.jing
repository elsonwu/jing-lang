// HTTP Server with Custom Handlers Example
// This demonstrates the enhanced HTTP server with user-defined route handlers

print("=== Jing HTTP Server with Custom Handlers ===");

print("\n=== Starting Multiple Servers ===");

// Start API server on port 8080
let api_server = start_http_server(8080);
print("API Server:");
print(api_server);

// Start Admin server on port 9000  
let admin_server = start_http_server(9000);
print("Admin Server:");
print(admin_server);

// Register custom handlers for API server using server handle
print("\n=== Registering API Server Handlers Using Server Handle ===");

let register1 = http_register_handler(api_server, "GET", "/api/users", "get_users_handler");
print(register1);

let register2 = http_register_handler(api_server, "POST", "/api/users", "create_user_handler");
print(register2);

let register3 = http_register_handler(api_server, "GET", "/api/products", "get_products_handler");  
print(register3);

let register4 = http_register_handler(api_server, "DELETE", "/api/users/123", "delete_user_handler");
print(register4);

// Register custom handlers for Admin server using server handle
print("\n=== Registering Admin Server Handlers Using Server Handle ===");

let admin1 = http_register_handler(admin_server, "GET", "/admin/stats", "get_admin_stats");
print(admin1);

let admin2 = http_register_handler(admin_server, "POST", "/admin/reset", "reset_system"); 
print(admin2);

let admin3 = http_register_handler(admin_server, "GET", "/admin/users", "get_all_users");
print(admin3);

// List currently running servers
let servers = list_http_servers();
print("\n=== Running Servers ===");
print(servers);

// Create some example HTTP responses
print("\n=== Example Response Creation ===");
let json_response = http_response(200, "application/json", "{\"users\": [{\"id\": 1, \"name\": \"Alice\"}]}");
print("JSON Response Example:");
print(json_response);

let html_response = http_response(200, "text/html", "<html><body><h1>User Management</h1><p>API is running!</p></body></html>");
print("HTML Response Example:");
print(html_response);

let error_response = http_response(404, "application/json", "{\"error\": \"User not found\"}");
print("Error Response Example:");  
print(error_response);

print("\n=== HTTP Servers Information ===");
print("API Server running on http://127.0.0.1:8080");
print("API routes registered:");
print("  - GET    http://127.0.0.1:8080/api/users");
print("  - POST   http://127.0.0.1:8080/api/users");  
print("  - GET    http://127.0.0.1:8080/api/products");
print("  - DELETE http://127.0.0.1:8080/api/users/123");
print("");
print("Admin Server running on http://127.0.0.1:9000");
print("Admin routes registered:");
print("  - GET    http://127.0.0.1:9000/admin/stats");
print("  - POST   http://127.0.0.1:9000/admin/reset");
print("  - GET    http://127.0.0.1:9000/admin/users");
print("");
print("Built-in routes available on both servers:");
print("  - GET    /");
print("  - GET    /status");
print("  - POST   /echo");
print("");
print("✅ Each server now has its own separate route handlers!");
print("✅ No more confusion about which server handles which route!");
print("Note: Custom handler function calling not yet implemented.");
print("      Custom routes currently return placeholder responses.");
